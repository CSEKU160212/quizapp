{"version":3,"file":"static/js/592.ad6dcfe4.chunk.js","mappings":"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","sources":["constants/formValidationErrors.js","utils/formValidations.js","utils/index.js","views/components/AlertMessage.js","views/pages/questions/AddQuestionForm.js","views/pages/questions/Index.js"],"sourcesContent":["export const loginFormErrors = {\r\n    emailRequired: \"Email is required\",\r\n    emailInvalid: \"Invalid email, please enter correct one\",\r\n    passwordRequired: \"Password is required\"\r\n}\r\n\r\nexport const questionValidationErrors = {\r\n    questionRequired: \"Question is required\",\r\n    optionsRequired: \"All option field are required\",\r\n    answerRequired: \"Answer is required\"\r\n}","import {\r\n  loginFormErrors,\r\n  questionValidationErrors,\r\n} from \"../constants/formValidationErrors\";\r\n\r\nexport const loginFormValidation = (formValues) => {\r\n  const { email, password } = formValues;\r\n  const errors = {};\r\n\r\n  if (!email || email === \"\") {\r\n    errors.email = loginFormErrors.emailRequired;\r\n  } else {\r\n    var pattern = new RegExp(\r\n      /^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i\r\n    );\r\n    if (!pattern.test(email)) {\r\n      errors.email = loginFormErrors.emailInvalid;\r\n    }\r\n  }\r\n\r\n  if (!password || password === \"\") {\r\n    errors.password = loginFormErrors.passwordRequired;\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const questionValidation = (item) => {\r\n  const errors = {};\r\n  if (!item?.question || item.question === \"\") {\r\n    errors.question = questionValidationErrors.questionRequired;\r\n  }\r\n  if (item?.options.length < 4) {\r\n    errors.options = questionValidationErrors.optionsRequired;\r\n  }\r\n\r\n  item?.options.forEach((item) => {\r\n    if (!item || item === \"\") {\r\n      errors.options = questionValidationErrors.optionsRequired;\r\n    }\r\n  });\r\n\r\n  if (!item?.answer || item?.answer === \"\") {\r\n    errors.answer = questionValidationErrors.answerRequired;\r\n  }\r\n  return errors;\r\n};\r\n","export const getVisibleRoutes = (routes, role)=>{\r\n    return routes.filter(route=>{\r\n        return route.visibleFor.includes(role);\r\n    })\r\n}\r\n\r\nexport const getVisibleNavItems = (_nav, role)=>{\r\n    return _nav.filter(navItem=>{\r\n        return navItem.accessibleBy.includes(role);\r\n    })\r\n}\r\n\r\nexport const getActiveQuizList = (quizList)=>{\r\n    return quizList.filter((quiz) => !quiz.isDeleted);\r\n}\r\n\r\nexport const findQuizFromQuizList = (quizList, id)=>{\r\n    const quiz = quizList.find(quizItem => Number(quizItem.id) === Number(id));\r\n    if(quiz){\r\n        return quiz;\r\n    }\r\n    return null;\r\n}\r\n\r\nexport const getActiveQuestions = (questions)=>{\r\n    console.log({questions});\r\n    return questions && questions.filter(item=>!item.isDeleted);\r\n}\r\n\r\nexport const formatQuestion = (data)=>{\r\n    let questionData = {};\r\n    questionData.question = data.question;\r\n    questionData.answer = data.answer;\r\n\r\n    const objectKeys = Object.keys(data.options);\r\n    let options = [];\r\n    const newOptions = data.options;\r\n\r\n    for (let i = 0; i < objectKeys.length; i++) {\r\n      options.push(newOptions[objectKeys[i]]);\r\n    }\r\n\r\n    questionData.options = options;\r\n    questionData.isDeleted = false;\r\n    return questionData;\r\n}\r\n\r\nexport const getCurrentYear = ()=>{\r\n    const d = new Date();\r\n    return d.getFullYear();\r\n}\r\n\r\nexport const formatQuiz = (quiz, questions)=>{\r\n    const formatedQuiz ={...quiz, questions:[quiz.questions]};\r\n    formatedQuiz.questions = questions;\r\n    return formatedQuiz;\r\n}","import React from 'react'\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nconst AlertMessage = ({variant, message}) => {\r\n  return (\r\n    <>\r\n      {message && (\r\n        <div style={{width: \"fit-content\"}} className=\"mx-auto\">\r\n          <Alert key={variant} variant={variant} className=\"text-center mb-2\">\r\n            {message}\r\n          </Alert>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AlertMessage","import React, { useState } from \"react\";\r\nimport { Button, Card, Col, Form, Row } from \"react-bootstrap\";\r\nimport {\r\n  addQuestion,\r\n  removeAddMessage,\r\n  removeErrorMessage,\r\n  useQuizDispatch,\r\n  useQuizState,\r\n} from \"../../../context\";\r\nimport { formatQuestion } from \"../../../utils\";\r\nimport { questionValidation } from \"../../../utils/formValidations\";\r\nimport AlertMessage from \"../../components/AlertMessage\";\r\n\r\nconst AddQuestionForm = ({ quizId }) => {\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [question, setQuestion] = useState({\r\n    question: \"\",\r\n    options: { optionA: \"\", optionB: \"\", optionC: \"\", optionD: \"\" },\r\n    answer: \"\",\r\n  });\r\n  const [formErrors, setFormErrors] = useState(null);\r\n  const { addMessage, errorMessage } = useQuizState();\r\n\r\n  const dispatch = useQuizDispatch();\r\n\r\n  const removeMessage = () => {\r\n    removeErrorMessage(dispatch);\r\n    removeAddMessage(dispatch);\r\n  };\r\n\r\n  const inputOnChangeHandler = (e) => {\r\n    const { name, value } = e.target;\r\n    if (name === \"question\" || name === \"answer\") {\r\n      const questionData = { ...question, [name]: value };\r\n      setQuestion(questionData);\r\n      formErrors &&\r\n        formErrors[name] &&\r\n        setFormErrors({ ...formErrors, [name]: \"\" });\r\n    } else {\r\n      const questionData = {\r\n        ...question,\r\n        options: { ...question.options, [name]: value },\r\n      };\r\n      setQuestion(questionData);\r\n      formErrors &&\r\n        formErrors.options &&\r\n        setFormErrors({ ...formErrors, options: \"\" });\r\n    }\r\n    removeMessage();\r\n  };\r\n\r\n  const addHandler = () => {\r\n    const newQuestion = formatQuestion(question);\r\n    const questionValidationErrors = questionValidation(newQuestion);\r\n\r\n    console.log(questionValidationErrors);\r\n\r\n    if (Object.keys(questionValidationErrors).length > 0) {\r\n      setFormErrors(questionValidationErrors);\r\n    } else {\r\n      addQuestion(dispatch, quizId, newQuestion);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!showForm ? (\r\n        <div className=\"lg-m-3 sm-m-1 md-m-2\" style={{ width: \"fit-content\" }}>\r\n          <Button\r\n            size=\"sm\"\r\n            onClick={() => {\r\n              setShowForm(true);\r\n            }}\r\n          >\r\n            Add Question\r\n          </Button>\r\n        </div>\r\n      ) : (\r\n        <Card className=\"m-3\" style={{ border: \"none\" }}>\r\n          <Card.Body>\r\n            <h5 className=\"text-center mb-3 text-primary\">Add Question</h5>\r\n            <AlertMessage variant=\"danger\" message={errorMessage} />\r\n            <AlertMessage variant=\"success\" message={addMessage} />\r\n            <Row>\r\n              <Col sm={12} md={6} lg={4} className=\"mx-auto\">\r\n                <Form>\r\n                  <Form.Group className=\"mb-3\" controlId=\"question\">\r\n                    <Form.Label>Question</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      name=\"question\"\r\n                      size=\"sm\"\r\n                      placeholder=\"Enter Question\"\r\n                      isInvalid={!!formErrors?.question}\r\n                      onChange={(e) => inputOnChangeHandler(e)}\r\n                    />\r\n\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {formErrors?.question}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                  <Row>\r\n                    {Object.keys(question.options).map((optionKey, index) => {\r\n                      return (\r\n                        <Col md={6} lg={6} sm={12} key={optionKey}>\r\n                          <Form.Group className=\"mb-3\" controlId={optionKey}>\r\n                            <Form.Label>{`Option ${String.fromCharCode(\r\n                              65 + index\r\n                            )}:`}</Form.Label>\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              name={optionKey}\r\n                              size=\"sm\"\r\n                              placeholder=\"Enter option\"\r\n                              isInvalid={\r\n                                !question.options[`${optionKey}`] &&\r\n                                formErrors?.options\r\n                              }\r\n                              onChange={(e) => inputOnChangeHandler(e)}\r\n                            />\r\n\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                              {!question.options[`${optionKey}`] &&\r\n                              formErrors?.options\r\n                                ? formErrors?.options\r\n                                : \"\"}\r\n                            </Form.Control.Feedback>\r\n                          </Form.Group>\r\n                        </Col>\r\n                      );\r\n                    })}\r\n                  </Row>\r\n                  <Form.Group className=\"mb-3\" controlId=\"answer\">\r\n                    <Form.Label>Answer</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      name=\"answer\"\r\n                      size=\"sm\"\r\n                      placeholder=\"Enter Answer\"\r\n                      isInvalid={!!formErrors?.answer}\r\n                      onChange={(e) => inputOnChangeHandler(e)}\r\n                    />\r\n\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {formErrors?.answer}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                  <div className=\"text-center\">\r\n                    <Button\r\n                      size=\"sm\"\r\n                      className=\"px-4 m-1\"\r\n                      variant=\"primary\"\r\n                      onClick={addHandler}\r\n                    >\r\n                      Add\r\n                    </Button>\r\n                    <Button\r\n                      size=\"sm\"\r\n                      className=\"px-4 m-1\"\r\n                      variant=\"warning\"\r\n                      onClick={() => {\r\n                        setShowForm(false);\r\n                        removeMessage();\r\n                      }}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              </Col>\r\n            </Row>\r\n          </Card.Body>\r\n        </Card>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddQuestionForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  deleteQuestion,\r\n  getQuizList,\r\n  removeDeleteMessage,\r\n  removeErrorMessage,\r\n  removeQuizUpdateMessage,\r\n  updateQuiz,\r\n  useQuizDispatch,\r\n  useQuizState,\r\n} from \"../../../context\";\r\nimport { findQuizFromQuizList, getActiveQuestions } from \"../../../utils\";\r\nimport { Button, Card, Col, Form, Row } from \"react-bootstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { questionValidation } from \"../../../utils/formValidations\";\r\nimport AddQuestionForm from \"./AddQuestionForm\";\r\nimport AlertMessage from \"../../components/AlertMessage\";\r\n\r\nconst Questions = (props) => {\r\n  const { match } = props;\r\n  const quizId = match.params.id;\r\n\r\n  const [quiz, setQuiz] = useState(null);\r\n  const [editQuestionId, setEditQuestionId] = useState(null);\r\n  const [formErrors, setFormErrors] = useState({});\r\n\r\n  const {\r\n    data: quizList,\r\n    errorMessage,\r\n    updateMessage,\r\n    deleteMessage,\r\n  } = useQuizState();\r\n\r\n  const dispatch = useQuizDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    getQuizList(dispatch);\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    const quiz = findQuizFromQuizList(quizList, quizId);\r\n    setQuiz(quiz);\r\n  }, [quizList, quizId, history]);\r\n\r\n  const removeMessages = () => {\r\n    removeQuizUpdateMessage(dispatch);\r\n    removeErrorMessage(dispatch);\r\n    removeDeleteMessage(dispatch);\r\n  };\r\n\r\n  const inputOnChangeHandler = (e, questionIndex, optionIndex) => {\r\n    const currentQuiz = { ...quiz };\r\n    currentQuiz.questions[questionIndex].options[optionIndex] = e.target.value;\r\n    removeMessages();\r\n  };\r\n\r\n  const questionOnChangeHandler = (e, questionIndex) => {\r\n    const currentQuiz = { ...quiz };\r\n    currentQuiz.questions[questionIndex].question = e.target.value;\r\n    removeMessages();\r\n  };\r\n\r\n  const answerOnChangeHandler = (e, questionIndex) => {\r\n    const currentQuiz = { ...quiz };\r\n    currentQuiz.questions[questionIndex].answer = e.target.value;\r\n    removeMessages();\r\n  };\r\n\r\n  const editHandler = (id) => {\r\n    setEditQuestionId(id);\r\n    removeMessages();\r\n  };\r\n\r\n  const cancelHandler = () => {\r\n    window.location.reload();\r\n    removeMessages();\r\n  };\r\n\r\n  const updateHandler = (questionIndex) => {\r\n    const validationErrors = questionValidation(quiz?.questions[questionIndex]);\r\n    if (Object.keys(validationErrors).length > 0) {\r\n      setFormErrors(validationErrors);\r\n    } else {\r\n      setFormErrors({});\r\n      updateQuiz(dispatch, quiz);\r\n    }\r\n  };\r\n\r\n  const deleteHandler = (questionId) => {\r\n    deleteQuestion(dispatch, quizId, questionId);\r\n  };\r\n\r\n    return (\r\n      <>\r\n        <div className=\"lg-m-3 sm-m-1 md-m-2 mb-5\">\r\n          {quiz && (\r\n            <h3 className=\"text-center\">{`Quiz Topic: ${quiz.topic}`}</h3>\r\n          )}\r\n          <AddQuestionForm quizId={quiz?.id} />\r\n          <AlertMessage variant=\"success\" message={deleteMessage} />\r\n          {quiz &&\r\n            quiz.questions &&\r\n            getActiveQuestions(quiz.questions).map(\r\n              (questionItem, questionIndex) => {\r\n                return (\r\n                  <Card\r\n                    as=\"div\"\r\n                    className=\"lg-m-3 sm-m-1 md-m-2 mt-4 shadow rounded\"\r\n                    key={`question-${questionIndex}`}\r\n                  >\r\n                    <Card.Header>\r\n                      {editQuestionId === questionItem.id && (\r\n                        <>\r\n                          <AlertMessage\r\n                            variant=\"danger\"\r\n                            message={errorMessage}\r\n                          />\r\n                          <AlertMessage\r\n                            variant=\"success\"\r\n                            message={updateMessage}\r\n                          />\r\n                        </>\r\n                      )}\r\n\r\n                      {editQuestionId === questionItem.id ? (\r\n                        <Row>\r\n                          <Col\r\n                            sm={12}\r\n                            md={6}\r\n                            lg={6}\r\n                            className=\"justify-content-center mx-auto\"\r\n                          >\r\n                            <Form.Group\r\n                              className=\"mb-2\"\r\n                              controlId={`questions-${questionIndex}`}\r\n                            >\r\n                              <Form.Label>\r\n                                <strong>{`Question:`}</strong>\r\n                              </Form.Label>\r\n                              <Form.Control\r\n                                type=\"text\"\r\n                                size=\"sm\"\r\n                                onChange={(e) =>\r\n                                  questionOnChangeHandler(e, questionIndex)\r\n                                }\r\n                                defaultValue={questionItem.question}\r\n                                isInvalid={!!formErrors?.question}\r\n                              />\r\n                              <Form.Control.Feedback type=\"invalid\">\r\n                                {formErrors?.question}\r\n                              </Form.Control.Feedback>\r\n                            </Form.Group>\r\n                          </Col>\r\n                        </Row>\r\n                      ) : (\r\n                        <Card.Title className=\"text-center\">\r\n                          {`${questionIndex + 1}) ${questionItem.question}`}\r\n                        </Card.Title>\r\n                      )}\r\n                    </Card.Header>\r\n                    <Card.Body className=\"m-2 align-items-center justify-content-center\">\r\n                      <div className=\"text-left mx-auto\">\r\n                        <Row>\r\n                          {questionItem?.options.map((option, optionIndex) => {\r\n                            return editQuestionId === questionItem.id ? (\r\n                              <Col\r\n                                md={6}\r\n                                lg={3}\r\n                                sm={12}\r\n                                key={`option-${optionIndex}`}\r\n                              >\r\n                                <Form.Group className=\"mb-2\" controlId=\"option\">\r\n                                  <Form.Label>\r\n                                    <strong>{`Option ${String.fromCharCode(\r\n                                      65 + optionIndex\r\n                                    )}:`}</strong>\r\n                                  </Form.Label>\r\n                                  <Form.Control\r\n                                    type=\"text\"\r\n                                    size=\"sm\"\r\n                                    onChange={(e) =>\r\n                                      inputOnChangeHandler(\r\n                                        e,\r\n                                        questionIndex,\r\n                                        optionIndex\r\n                                      )\r\n                                    }\r\n                                    defaultValue={option}\r\n                                  />\r\n                                </Form.Group>\r\n                              </Col>\r\n                            ) : (\r\n                              <Col\r\n                                md={6}\r\n                                lg={3}\r\n                                sm={12}\r\n                                className=\"mx-auto\"\r\n                                key={`${option}-div-${optionIndex}`}\r\n                              >{`${String.fromCharCode(\r\n                                65 + optionIndex\r\n                              )}) ${option}`}</Col>\r\n                            );\r\n                          })}\r\n                        </Row>\r\n                        <div className=\"text-danger mb-2 small\">\r\n                          {formErrors?.options}\r\n                        </div>\r\n\r\n                        {editQuestionId === questionItem.id ? (\r\n                          <Form.Group\r\n                            className=\"mb-2\"\r\n                            controlId={`answer-${questionIndex}`}\r\n                          >\r\n                            <Form.Label>\r\n                              <strong>{`Right Answer:`}</strong>\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              size=\"sm\"\r\n                              onChange={(e) =>\r\n                                answerOnChangeHandler(e, questionIndex)\r\n                              }\r\n                              defaultValue={questionItem.answer}\r\n                              isInvalid={!!formErrors?.answer}\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                              {formErrors?.answer}\r\n                            </Form.Control.Feedback>\r\n                          </Form.Group>\r\n                        ) : (\r\n                          <p className=\"mt-2\">\r\n                            <strong className=\"font-weight-bold\">{`Right Answer: `}</strong>\r\n                            <strong className=\"text-success\">{`${questionItem.answer}`}</strong>\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                    </Card.Body>\r\n                    <Card.Footer className=\"text-center\">\r\n                      <Button\r\n                        as=\"button\"\r\n                        variant={\r\n                          editQuestionId === questionItem.id\r\n                            ? \"outline-success\"\r\n                            : \"outline-primary\"\r\n                        }\r\n                        size=\"sm\"\r\n                        className=\"mx-1\"\r\n                        onClick={() => {\r\n                          editQuestionId === questionItem.id\r\n                            ? updateHandler(questionIndex)\r\n                            : editHandler(questionItem.id);\r\n                        }}\r\n                      >\r\n                        {editQuestionId === questionItem.id\r\n                          ? \"Save Changes\"\r\n                          : \"Edit Question\"}\r\n                      </Button>\r\n                      {editQuestionId === questionItem.id && (\r\n                        <Button\r\n                          as=\"button\"\r\n                          variant=\"outline-info\"\r\n                          size=\"sm\"\r\n                          className=\"mx-1\"\r\n                          onClick={() => cancelHandler()}\r\n                        >\r\n                          Cancel\r\n                        </Button>\r\n                      )}\r\n                      <Button\r\n                        as=\"button\"\r\n                        variant=\"outline-danger\"\r\n                        size=\"sm\"\r\n                        className=\"mx-1\"\r\n                        onClick={() => deleteHandler(questionItem.id)}\r\n                      >\r\n                        Delete Question\r\n                      </Button>\r\n                    </Card.Footer>\r\n                  </Card>\r\n                );\r\n              }\r\n            )}\r\n        </div>\r\n      </>\r\n    );\r\n};\r\n\r\nexport default Questions;\r\n"],"names":["loginFormErrors","questionValidationErrors","loginFormValidation","formValues","email","password","errors","RegExp","test","questionValidation","item","question","options","length","forEach","answer","getVisibleRoutes","routes","role","filter","route","visibleFor","includes","getVisibleNavItems","_nav","navItem","accessibleBy","getActiveQuizList","quizList","quiz","isDeleted","findQuizFromQuizList","id","find","quizItem","Number","getActiveQuestions","questions","console","log","formatQuestion","data","questionData","objectKeys","Object","keys","newOptions","i","push","getCurrentYear","Date","getFullYear","formatQuiz","formatedQuiz","variant","message","style","width","className","quizId","useState","showForm","setShowForm","optionA","optionB","optionC","optionD","setQuestion","formErrors","setFormErrors","useQuizState","addMessage","errorMessage","dispatch","useQuizDispatch","removeMessage","removeErrorMessage","removeAddMessage","inputOnChangeHandler","e","target","name","value","Card","border","AlertMessage","Row","Col","sm","md","lg","Form","controlId","type","size","placeholder","isInvalid","onChange","map","optionKey","index","String","fromCharCode","Button","onClick","newQuestion","addQuestion","props","match","params","setQuiz","editQuestionId","setEditQuestionId","updateMessage","deleteMessage","history","useHistory","useEffect","getQuizList","removeMessages","removeQuizUpdateMessage","removeDeleteMessage","topic","questionItem","questionIndex","as","questionOnChangeHandler","defaultValue","option","optionIndex","answerOnChangeHandler","validationErrors","updateQuiz","updateHandler","window","location","reload","questionId","deleteQuestion"],"sourceRoot":""}